disabled_rules: # rule identifiers to exclude from running
  - trailing_comma # it is not same as google code rule for trailing coma
  - file_header # not in google guidelines
  - line_length # disabling this rule as while declaring many constant and method its very common to excees limit, there are  1000+ warning just from this
  - control_statement
  # - colon
  - comma
  # - control_statement
  - identifier_name
  - force_cast
  - large_tuple
  - notification_center_detachment
  - nesting
  - function_parameter_count
  - unused_optional_binding
  - multiple_closures_with_trailing_closure
  - trailing_whitespace # <---------
opt_in_rules: # some rules are only opt-in
  - empty_count
  - empty_string
  # Find all the available rules by running:
  # swiftlint rules
included: # paths to include during linting. `--path` is ignored if present.
  - Lint
  - CurrencyApp
excluded: # paths to ignore during linting. Takes precedence over `included`.
  - fastlane
  - Carthage
  - Pods
  - CurrencyAppTests
  - CurrencyAppUITests

opt_in_rules:
  - array_init
  - attributes
  - closure_end_indentation
  - closure_spacing
  - contains_over_first_not_nil
  - empty_count
  - explicit_init
  - extension_access_modifier
  - fatal_error_message
  - file_name
  - first_where
  - joined_default_parameter
  - let_var_whitespace
  - literal_expression_end_indentation
  - nimble_operator
  - number_separator
  - operator_usage_whitespace
  - overridden_super_call
  - override_in_extension
  - pattern_matching_keywords
  - prohibited_super_call
  - quick_discouraged_call
  - quick_discouraged_focused_test
  - quick_discouraged_pending_test
  - redundant_nil_coalescing
  - single_test_class
  - sorted_first_last
  - sorted_imports
  - unneeded_parentheses_in_closure_argument
  - vertical_parameter_alignment_on_call
  - yoda_condition
  - vertical_whitespace_closing_braces
  - vertical_whitespace_opening_braces
  - collection_alignment
  - trailing_whitespace

identifier_name:
  excluded:
    - id

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
# force_cast: warning # implicitly
force_try:
  severity: warning # explicitly
# rules that have both warning and error levels, can set just the warning level
# implicitly


# they can set both implicitly with an array
type_body_length:
  - 300 # warning
  - 400 # error
# or they can set both explicitly
file_length:
  warning: 500
  error: 1200
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 4 # only warning
  max_length: # warning and error
    warning: 40
    error: 50
  excluded: iPhone # excluded via string
identifier_name:
  min_length: # only min_length
    error: 1 # only error
  excluded: # excluded via string array
    - id
    - URL
    - GlobalAPIKey
reporter: "xcode" # reporter type (xcode, json, csv, checkstyle, junit, html, emoji)

custom_rules:
  rule_id:
    included: Source/SwiftLintFramework/Rules/\w+\.swift
    name: Rule ID
    message: Rule IDs must be all lowercase, snake case and not end with `rule`
    regex: identifier:\s*("\w+_rule"|"\S*[^a-z_]\S*")
    severity: error
  fatal_error:
    name: Fatal Error
    excluded: "Tests/*"
    message: Prefer using `queuedFatalError` over `fatalError` to avoid leaking compiler host machine paths.
    regex: \bfatalError\b
    match_kinds:
      - identifier
    severity: error
  rule_test_function:
    included: Tests/SwiftLintFrameworkTests/RulesTests.swift
    name: Rule Test Function
    message: Rule Test Function mustn't end with `rule`
    regex: func\s*test\w+(r|R)ule\(\)
    severity: error
